// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pdfcomposegrpc.proto

package pdfcomposegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PDFComposer_ConverToPdf_FullMethodName = "/pdfcomposegrpc.PDFComposer/ConverToPdf"
)

// PDFComposerClient is the client API for PDFComposer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFComposerClient interface {
	ConverToPdf(ctx context.Context, in *ImageList, opts ...grpc.CallOption) (*PDFResponse, error)
}

type pDFComposerClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFComposerClient(cc grpc.ClientConnInterface) PDFComposerClient {
	return &pDFComposerClient{cc}
}

func (c *pDFComposerClient) ConverToPdf(ctx context.Context, in *ImageList, opts ...grpc.CallOption) (*PDFResponse, error) {
	out := new(PDFResponse)
	err := c.cc.Invoke(ctx, PDFComposer_ConverToPdf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFComposerServer is the server API for PDFComposer service.
// All implementations must embed UnimplementedPDFComposerServer
// for forward compatibility
type PDFComposerServer interface {
	ConverToPdf(context.Context, *ImageList) (*PDFResponse, error)
	mustEmbedUnimplementedPDFComposerServer()
}

// UnimplementedPDFComposerServer must be embedded to have forward compatible implementations.
type UnimplementedPDFComposerServer struct {
}

func (UnimplementedPDFComposerServer) ConverToPdf(context.Context, *ImageList) (*PDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConverToPdf not implemented")
}
func (UnimplementedPDFComposerServer) mustEmbedUnimplementedPDFComposerServer() {}

// UnsafePDFComposerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFComposerServer will
// result in compilation errors.
type UnsafePDFComposerServer interface {
	mustEmbedUnimplementedPDFComposerServer()
}

func RegisterPDFComposerServer(s grpc.ServiceRegistrar, srv PDFComposerServer) {
	s.RegisterService(&PDFComposer_ServiceDesc, srv)
}

func _PDFComposer_ConverToPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFComposerServer).ConverToPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFComposer_ConverToPdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFComposerServer).ConverToPdf(ctx, req.(*ImageList))
	}
	return interceptor(ctx, in, info, handler)
}

// PDFComposer_ServiceDesc is the grpc.ServiceDesc for PDFComposer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFComposer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcomposegrpc.PDFComposer",
	HandlerType: (*PDFComposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConverToPdf",
			Handler:    _PDFComposer_ConverToPdf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdfcomposegrpc.proto",
}
